// This file is part of SaladSlicer. SaladSlicer is licensed 
// under the terms of GNU General Public License as published by the 
// Free Software Foundation. For more information and the LICENSE file, 
// see <https://github.com/3DCP-TUe/SaladSlicer>.

// System Libs
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Security.Permissions;
// Rhino Libs
using Rhino.Geometry;
// Salad Libs
using SaladSlicer.Interfaces;

namespace SaladSlicer.CodeGeneration
{
    /// <summary>
    /// Represents a Group of Program Objects.
    /// </summary>
    [Serializable()]
    public class ProgramGroup : IProgram, IGeometry
    {
        #region fields
        private IList<IProgram> _objects;
        #endregion

        #region (de)serialisation
        //TODO
        #endregion

        #region constructors
        /// <summary>
        /// Initializes an empty instance of the ProgramGroup class.
        /// </summary>         
        public ProgramGroup()
        {
            _objects = new List<IProgram>();
        }

        /// <summary>
        /// Initializes a new instance of the ProgramGroup class.
        /// </summary>
        /// <param name="objects">List with program objects to store inside this group. </param>
        public ProgramGroup(IList<IProgram> objects)
        {
            _objects = objects;
        }

        /// <summary>
        /// Initializes a new instance of the Program Group class by duplicating an existing Program Group instance.
        /// </summary>
        /// <param name="group"> The Program Group instance to duplicate. </param>
        public ProgramGroup(ProgramGroup group)
        {
            _objects = new List<IProgram>() { };

            for (int i = 0; i < group.Objects.Count; i++)
            {
                _objects.Add(group.Objects[i].DuplicateProgramObject());
            }
        }

        /// <summary>
        /// Returns an exact duplicate of this Program Group instance.
        /// </summary>
        /// <returns> The exact duplicate of this Program Group instance. </returns>
        public ProgramGroup Duplicate()
        {
            return new ProgramGroup(this);
        }

        /// <summary>
        /// Returns an exact duplicate of this Program Group instance as an IGeometry.
        /// </summary>
        /// <returns> The exact duplicate of this Program Group instance as an IGeometry. </returns>
        public IGeometry DuplicateGeometryObject()
        {
            return this.Duplicate();
        }

        /// <summary>
        /// Returns an exact duplicate of this Program Group instance as an IProgram
        /// </summary>
        /// <returns> The exact duplicate of this Program Group instance as an IProgram. </returns>
        public IProgram DuplicateProgramObject()
        {
            return this.Duplicate();
        }
        #endregion

        #region methods
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns> A string that represents the current object. </returns>
        public override string ToString()
        {
            return "Program Group";
        }

        /// <summary>
        /// Returns the ProgramGroup object as a string
        /// </summary>
        /// <returns>The string</returns>
        public string ToSingleString()
        {
            throw new Exception("Grouped Program Objects cannot be represented by a single string");
        }

        /// <summary>
        /// Adds the NC program lines generated by this object to the program.
        /// </summary>
        /// <param name="programGenerator"> The program generator. </param>
        public void ToProgram(ProgramGenerator programGenerator)
        {
            for (int i = 0; i < _objects.Count; i++)
            {
                _objects[i].ToProgram(programGenerator);
            }
        }

        /// <summary>
        /// Returns the Bounding Box of the object.
        /// </summary>
        /// <returns> The Bounding Box. </returns>
        /// <param name="accurate"> If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. </param>

        public BoundingBox GetBoundingBox(bool accurate)
        {
            BoundingBox result = new BoundingBox();

            for (int i = 0; i < _objects.Count; i++)
            {
                if (_objects[i] is IGeometry geometry)
                {
                    result.Union(geometry.GetBoundingBox(accurate));
                }
            }

            return result;
        }

        /// <summary>
        /// Transforms the geometry.
        /// </summary>
        /// <param name="xform"> Transformation to apply to geometry. </param>
        /// <returns> True on success, false on failure. </returns>
        public bool Transform(Transform xform)
        {
            for (int i = 0; i < _objects.Count; i++)
            {
                if (_objects[i] is IGeometry geometry)
                {
                    geometry.Transform(xform);
                }
            }

            return true;
        }
        #endregion

        #region properties
        /// <summary>
        /// Gets a value indicating whether or not the object is valid.
        /// </summary>
        public bool IsValid
        {
            get
            { 
                if (_objects == null) { return false; } 
                return true;
            }
        }

        /// <summary>
        /// Gets or sets the objects.
        /// </summary>
        public IList<IProgram> Objects
        {
            get { return _objects; }
            set { _objects = value; }
        }
        #endregion
    }
}
