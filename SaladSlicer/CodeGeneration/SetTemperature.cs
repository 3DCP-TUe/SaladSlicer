// This file is part of SaladSlicer. SaladSlicer is licensed 
// under the terms of GNU General Public License as published by the 
// Free Software Foundation. For more information and the LICENSE file, 
// see <https://github.com/3DCP-TUe/SaladSlicer>.

// System Libs
using System;
using System.Runtime.Serialization;
using System.Security.Permissions;
// Salad Libs
using SaladSlicer.Interfaces;
using SaladSlicer.Utils;
using SaladSlicer.Enumerations;

namespace SaladSlicer.CodeGeneration
{
    /// <summary>
    /// Represent the set temperature settings
    /// </summary>
    [Serializable()]
    public class SetTemperature : IProgram
    {
        #region fields
        private readonly double _hotEndTemperature = 0;
        private readonly double _bedTemperature = 0;
        #endregion

        /// <summary>
        /// Protected constructor needed for deserialization of the object.  
        /// </summary>
        /// <param name="info"> The SerializationInfo to extract the data from. </param>
        /// <param name="context"> The context of this deserialization. </param>
        protected SetTemperature(SerializationInfo info, StreamingContext context)
        {
            // string version = (int)info.GetValue("Version", typeof(string)); // <-- use this if the (de)serialization changes
            _hotEndTemperature = (double)info.GetValue("Hot end temperature", typeof(double));
            _bedTemperature = (double)info.GetValue("Bed temperature", typeof(double));
        }

        /// <summary>
        /// Populates a SerializationInfo with the data needed to serialize the object.
        /// </summary>
        /// <param name="info"> The SerializationInfo to populate with data. </param>
        /// <param name="context"> The destination for this serialization. </param>
        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("Version", HelperMethods.GetVersionNumber(), typeof(string));
            info.AddValue("Hot end temperature", _hotEndTemperature, typeof(double));
            info.AddValue("Bed temperature", _bedTemperature, typeof(double));
        }

        #region constructors
        /// <summary>
        /// Creates a default temperature setting with zeros
        /// </summary>
        public SetTemperature(){}

        public SetTemperature(SetTemperature setTemperature)
        {
            _hotEndTemperature = setTemperature.HotEndTemperature;
            _bedTemperature = setTemperature.BedTemperature;
        }

        /// <summary>
        /// Creates temperature settings
        /// </summary>
        /// <param name="hotEndTemperature">The hot end temperature to be set</param>
        /// <param name="bedTemperature">The bed temperature to be set</param>
        public SetTemperature(double hotEndTemperature, double bedTemperature)
        {
            _hotEndTemperature = hotEndTemperature;
            _bedTemperature = bedTemperature;    
        }

        /// <summary>
        /// Returns an exact duplicate of this Set Temperature object.
        /// </summary>
        /// <returns> The exact duplicate of this Set Temperature instance </returns>
        public SetTemperature Duplicate()
        {
            return new SetTemperature(this);
        }

        /// <summary>
        /// Returns an exact duplicate of this Set Temperature object
        /// </summary>
        /// <returns> The exact duplicate of this Set Temperature instance as an IProgram. </returns>
        public IProgram DuplicateProgramObject()
        {
            return this.Duplicate();
        }
        #endregion

        #region methods
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns> A string that represents the current object. </returns>
        public override string ToString()
        {
            return ($"Temperature settings");
        }

        /// <summary>
        /// Returns the Temperature Settings as a string
        /// </summary>
        /// <returns>The string</returns>
        public string ToSingleString()
        {
            throw new Exception("Temperature Settings cannot be represented by a single string");
        }

        /// <summary>
        /// Adds the NC program lines generated by this object to the program.
        /// </summary>
        /// <param name="programGenerator"> The program generator. </param>
        public void ToProgram(ProgramGenerator programGenerator)
        {

            programGenerator.Program.Add("; ----------------------------------------------------------------------");
            programGenerator.Program.Add("; TEMPERATURE SETTINGS");
            programGenerator.Program.Add("; ----------------------------------------------------------------------");
            
            if (programGenerator.PrinterSettings.ProgramType == ProgramTypes.Marlin)
            {
                programGenerator.Program.Add(" ");
                if (_hotEndTemperature != 0 || _bedTemperature != 0)
                {
                    programGenerator.Program.Add("Z10; Move off printbed");
                    
                    if (_hotEndTemperature != 0) { programGenerator.Program.Add($"M104 S{_hotEndTemperature:0.#}; Set hotend temperature"); }
                    if (_bedTemperature != 0) { programGenerator.Program.Add($"M109 S{_bedTemperature:0.#}; Set bed temperature"); }
                    
                    programGenerator.Program.Add("M105; Report temperature");
                    
                    if (_hotEndTemperature != 0){programGenerator.Program.Add($"M109 S{_hotEndTemperature:0.#}; Wait for hotend temperature ");}
                    if (_bedTemperature != 0){programGenerator.Program.Add($"M190 S{_bedTemperature:0.#}; Wait for bed temperature ");}
                    
                    programGenerator.Program.Add("Z-10; Move back to original position");
                }
            }
            else
            {
                programGenerator.Program.Add("No temperature settings available for this program type ");
            }
        }
        #endregion

        #region properties
        /// <summary>
        /// Gets a value indicating whether or not the object is valid.
        /// </summary>
        public bool IsValid
        {
            get
            {
                if (_hotEndTemperature == double.NaN) { return false; }
                return true;
            }
        }
        /// <summary>
        /// Gets the program type.
        /// </summary>
        public double HotEndTemperature
        {
            get { return _hotEndTemperature; }
        }
        /// <summary>
        /// Gets the program type.
        /// </summary>
        public double BedTemperature
        {
            get { return _bedTemperature; }
        }
        #endregion
    }
}
