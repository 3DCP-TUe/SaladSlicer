// This file is part of SaladSlicer. SaladSlicer is licensed 
// under the terms of GNU General Public License as published by the 
// Free Software Foundation. For more information and the LICENSE file, 
// see <https://github.com/3DCP-TUe/SaladSlicer>.

// System Libs
using System.Collections.Generic;

namespace SaladSlicer.Core.CodeGeneration
{
    /// <summary>
    /// Represents a Group of Program Objects.
    /// </summary>
    public class ProgramGroup : IProgram
    {
        #region fields
        private List<IProgram> _objects;
        #endregion

        #region (de)serialisation
        //TODO
        #endregion

        #region constructors
        /// <summary>
        /// Initializes an empty instance of the ProgramGroup class.
        /// </summary>         
        public ProgramGroup()
        {
            _objects = new List<IProgram>();
        }

        /// <summary>
        /// Initializes a new instance of the ProgramGroup class.
        /// </summary>
        /// <param name="objects">List with program objects to store inside this group. </param>
        public ProgramGroup(List<IProgram> objects)
        {
            _objects = objects;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="group"></param>
        public ProgramGroup(ProgramGroup group)
        {
            _objects = group.Objects; // TODO: Deep copy..
        }

        /// <summary>
        /// Returns an exact duplicate of this Program Group instance.
        /// </summary>
        /// <returns> The exact duplicate of this Program Group instance. </returns>
        public ProgramGroup Duplicate()
        {
            return new ProgramGroup(this);
        }

        /// <summary>
        /// Returns an exact duplicate of this Program Group instance as an IProgram
        /// </summary>
        /// <returns> The exact duplicate of this Program Group instance as an IProgram. </returns>
        public IProgram DuplicateProgramObject()
        {
            return this.Duplicate() as IProgram;
        }
        #endregion

        #region methods
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns> A string that represents the current object. </returns>
        public override string ToString()
        {
            return "Program Group";
        }

        /// <summary>
        /// Adds the NC program lines generated by this object to the program.
        /// </summary>
        /// <param name="programGenerator"> The program generator. </param>
        public void ToSinumerik(ProgramGenerator programGenerator)
        {
            for (int i = 0; i < _objects.Count; i++)
            {
                _objects[i].ToSinumerik(programGenerator);
            }
        }
        #endregion

        #region properties
        /// <summary>
        /// Gets a value indicating whether or not the object is valid.
        /// </summary>
        public bool IsValid
        {
            get
            { 
                if (_objects == null) { return false; } 
                return true;
            }
        }

        /// <summary>
        /// Gets or sets the objects.
        /// </summary>
        public List<IProgram> Objects
        {
            get { return _objects; }
            set { _objects = value; }
        }
        #endregion
    }
}
