// This file is part of SaladSlicer. SaladSlicer is licensed 
// under the terms of GNU General Public License as published by the 
// Free Software Foundation. For more information and the LICENSE file, 
// see <https://github.com/3DCP-TUe/SaladSlicer>.

// Salad Libs
using SaladSlicer.Core.Interfaces;

namespace SaladSlicer.Core.CodeGeneration
{
    /// <summary>
    /// Represents the Feed Rate.
    /// </summary>
    public class FeedRate : IProgram
    {
        #region fields
        private double _feedRate;
        #endregion

        #region (de)serialisation
        //TODO
        #endregion

        #region constructors
        /// <summary>
        /// Initializes an empty instance of the FeedRate class.
        /// </summary>         
        public FeedRate()
        {
            _feedRate = double.NaN;
        }

        /// <summary>
        /// Initializes a new instance of the FeedRate class.
        /// </summary>
        /// <param name="feedRate">Double representing the velocity of movement.</param>
        public FeedRate(double feedRate)
        {
            _feedRate = feedRate;
        }

        /// <summary>
        /// Initializes a new instance of the Feed Rate class by duplicating an existing Feed Rate instance. 
        /// </summary>
        /// <param name="feedRate"> The Feed Rate instance to duplicate. </param>
        public FeedRate(FeedRate feedRate)
        {
            _feedRate = feedRate.Feedrate;
        }

        /// <summary>
        /// Returns an exact duplicate of this Feed Rate instance.
        /// </summary>
        /// <returns> The exact duplicate of this Feed Rate instance. </returns>
        public FeedRate Duplicate()
        {
            return new FeedRate(this);
        }

        /// <summary>
        /// Returns an exact duplicate of this Feed Rate instance as an IProgram
        /// </summary>
        /// <returns> The exact duplicate of this Feed Rate instance as an IProgram. </returns>
        public IProgram DuplicateProgramObject()
        {
            return this.Duplicate() as IProgram;
        }
        #endregion

        #region methods
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns> A string that represents the current object. </returns>
        public override string ToString()
        {
            return $"Set Feedrate (F{_feedRate:0.###} mm/min)";
        }

        /// <summary>
        /// Returns the FeedRate object as a string
        /// </summary>
        /// <returns>The string</returns>
        public string ToSingleString()
        {
            return ($"F{_feedRate:0.###}");
        }

        /// <summary>
        /// Adds the NC program lines generated by this object to the program.
        /// </summary>
        /// <param name="programGenerator"> The program generator. </param>
        public void ToProgram(ProgramGenerator programGenerator,int type)
        {
            programGenerator.Program.Add($"F{_feedRate:0.###} ; Feedrate in mm/min");
        }
        #endregion

        #region properties
        /// <summary>
        /// Gets a value indicating whether or not the object is valid.
        /// </summary>
        public bool IsValid
        {
            get
            { 
                if (_feedRate == double.NaN) { return false; } 
                return true;
            }
        }

        /// <summary>
        /// Gets or sets the feedrate in mm/min.
        /// </summary>
        public double Feedrate
        {
            get { return _feedRate; }
            set { _feedRate = value; }
        }
        #endregion
    }
}
