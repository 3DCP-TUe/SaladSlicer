// This file is part of SaladSlicer. SaladSlicer is licensed 
// under the terms of GNU General Public License as published by the 
// Free Software Foundation. For more information and the LICENSE file, 
// see <https://github.com/3DCP-TUe/SaladSlicer>.

// System Libs
using System;
using System.Runtime.Serialization;
using System.Security.Permissions;
using Rhino.Geometry;

namespace SaladSlicer.Core.CodeGeneration
{
    /// <summary>
    /// Represents a custom (user definied) Code Line.
    /// </summary>
    public class FeedRate : IProgram
    {
        #region fields
        private double _feedRate;
        #endregion

        #region constructors
        /// <summary>
        /// Initializes an empty instance of the AbsoluteCoordinate class.
        /// </summary>         
        public FeedRate()
        {
            _feedRate = double.NaN;
        }
        /// <summary>
        /// Initializes a new instance of the AbsoluteCoordinate class.
        /// </summary>
        /// <param name="feedRate">Double representing the speed of movement</param>
        public FeedRate(double feedRate)
        {
            _feedRate = feedRate;
        }


        #endregion

        #region methods
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns> A string that represents the current object. </returns>
        public override string ToString()
        {
            return $"Set FeedRate [mm/min] (F{_feedRate:0.###})";
        }

        /// <summary>
        /// Adds the NC program lines generated by this object to the program.
        /// </summary>
        /// <param name="programGenerator"> The program generator. </param>
        public void ToProgram(ProgramGenerator programGenerator)
        {
            programGenerator.Program.Add($"F{_feedRate:0.###} ; Feedrate in mm/min");
        }
        #endregion

        #region properties
        public bool IsValid
        {
            /// <summary>
            /// Gets a value indicating whether or not the object is valid.
            /// </summary>
            get
            { 
                if (_feedRate == double.NaN) { return false; } 
                return true;
            }
        }

        #endregion
    }
}
